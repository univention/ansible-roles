---

- name: "ucs_join | Check if all mandatory common vars are set"
  ansible.builtin.assert:
    that:
      - "ucs_join_server_type | string | length > 0"
      - "ucs_join_server_type in ['master', 'backup', 'slave', 'member']"
      - "ucs_join_admin_user_name | string | length > 0"
      - "ucs_join_root_password | string | length > 0"
      - "ucs_join_hostname | string | length > 0"
      - "ucs_join_domain_name | string | length > 0"
      - "ucs_join_basedn | string | length > 0"
      - "ucs_join_network_config_interface | string | length > 0"
      - "ucs_join_network_config_type | string | length > 0"
      - "ucs_join_network_config_type == 'static' or ucs_join_network_config_type == 'dhcp'"
      - "ucs_join_nameservers is iterable"
      - "ucs_join_nameservers | list | select('search', '^nameserver[1-3]$') | length > 0"
    fail_msg: |
      At least one necessary variable is not set.
      Skip this check with --skip-tags ucs_join_check_common_preconditions
  changed_when: false
  tags:
    - "ucs_join"
    - "ucs_join_check_common_preconditions"

- name: "ucs_join | Check if all static network setting vars are set"
  ansible.builtin.assert:
    that:
      - "ucs_join_network_config_static_ip_config | string | length > 0"
      - "ucs_join_network_config_static_ip_config | ansible.utils.ipaddr('address') | length > 0"
      - "ucs_join_network_config_static_ip_config | ansible.utils.ipaddr('netmask') | length > 0"
      - "ucs_join_network_config_static_ip_config | ansible.utils.ipaddr('network') | length > 0"
      - "ucs_join_network_config_static_gateway | string | length > 0"
      - "ucs_join_network_config_static_dns_servers | length > 0"
    fail_msg: |
      At least one necessary variable is not set.
      Skip this check with --skip-tags ucs_join_check_static_network_preconditions
  changed_when: false
  when: "ucs_join_network_config_type == 'static'"
  tags:
    - "ucs_join"
    - "ucs_join_check_static_network_preconditions"

- name: "ucs_join | Check that all vars for a domain join are set"
  ansible.builtin.assert:
    that:
      - "ucs_join_master_server | string | length > 0"
      - "ucs_join_master_server | ansible.utils.ipaddr('address') | length > 0"
    fail_msg: |
      At least one necessary variable is not set.
      Skip this check with --skip-tags ucs_join_check_domain_join_preconditions
  changed_when: false
  when: "ucs_join_server_type | default('master') != 'master'"
  tags:
    - "ucs_join"
    - "ucs_join_check_domain_join_preconditions"

- name: "ucs_join | Get derived admin password"
  ansible.builtin.set_fact:
    ucs_join_final_root_password: "{{ ucs_join_derive_root_password_prefix + '@' + inventory_hostname.split('-')[-1] }}"
  changed_when: false
  no_log: "{{ ucs_join_hide_logging }}"
  when: "ucs_join_derive_root_password_from_hostname | bool"
  tags:
    - "always"
    - "ucs_join"
    - "ucs_join_derive_admin_password"

- name: "ucs_join | Use preconfigured root password"
  ansible.builtin.set_fact:
    ucs_join_final_root_password: "{{ ucs_join_root_password }}"
  changed_when: false
  no_log: "{{ ucs_join_hide_logging }}"
  when: "not ucs_join_derive_root_password_from_hostname | bool"
  tags:
    - "always"
    - "ucs_join"
    - "ucs_join_derive_admin_password"

- name: "ucs_join | Check if system-setup is run"
  ansible.builtin.stat:
    path: "/etc/ansible/univention-system-setup_sucessful"
  changed_when: false
  register: "ucs_join_system_setup_status"
  tags:
    - "always"
    - "ucs_join"
    - "ucs_join_system_setup_check"

- name: "ucs_join | Carry out system setup"
  when: "not ucs_join_system_setup_status.stat.exists"
  tags:
    - "ucs_join"
    - "ucs_join_system_setup"
  block:
    - name: "ucs_join | Create UCS join profile from template"
      ansible.builtin.template:
        src: "profile.j2"
        dest: "/var/cache/univention-system-setup/profile"
        mode: "644"
      no_log: "{{ ucs_join_hide_logging }}"
      tags:
        - "ucs_join_system_setup_profile"

    - name: "ucs_join | primary | Carry out UCS join (primary/standalone)"
      ansible.builtin.shell:
        cmd: >
          set -o pipefail &&
          /usr/lib/univention-system-setup/scripts/setup-join.sh
          |& /usr/bin/tee -a /var/log/univention/setup.log
        executable: "/bin/bash"
      environment:
        DEBIAN_FRONTEND: "noninteractive"
      check_mode: false
      when: "ucs_join_server_type | default('master') == 'master'"
      tags:
        - "ucs_join_system_setup_primary"
        - "ucs_join_system_setup_standalone"

    - name: "ucs_join | Ensure custom facts directory exists"
      ansible.builtin.file:
        path: "/etc/ansible/facts.d"
        state: "directory"
        mode: "0755"
      tags:
        - "ucs_join_custom_facts_directory"

    - name: "ucs_join | primary | Create UCS join profile from template"
      ansible.builtin.template:
        src: "system-setup-vars.j2"
        dest: "/etc/ansible/facts.d/system-setup-vars.yml"
        mode: "644"
      check_mode: false
      tags:
        - "ucs_join_system_setup_profile"

    - name: "ucs_join | domain join | Carry out UCS join ({{ ucs_join_server_type }})"
      when: "ucs_join_server_type | default('master') != 'master'"
      tags:
        - "ucs_join_system_setup_domain_join"
      block:
        - name: "ucs_join | Create temporary admin password file"
          ansible.builtin.tempfile:
            state: "file"
          changed_when: false
          check_mode: false
          register: "ucs_join_admin_pw_file"
          tags:
            - "ucs_join_system_setup_domain_join_admin_pw_file_temp"

        - name: "ucs_join | domain join | Write admin password into temporary file"
          ansible.builtin.copy:
            dest: "{{ ucs_join_admin_pw_file.path }}"
            content: "{{ ucs_join_root_password }}"
            mode: "0600"
          changed_when: false
          check_mode: false
          no_log: "{{ ucs_join_hide_logging }}"
          tags:
            - "ucs_join_system_setup_domain_join_admin_pw_file"

        - name: "ucs_join | domain join | Carry out UCS join ({{ ucs_join_server_type }})"
          ansible.builtin.shell:
            cmd: >
              set -o pipefail &&
              /usr/lib/univention-system-setup/scripts/setup-join.sh
              --dcaccount "{{ ucs_join_admin_user_name }}"
              --password_file "{{ ucs_join_admin_pw_file.path }}"
              |& /usr/bin/tee -a /var/log/univention/setup.log
            executable: "/bin/bash"
          environment:
            DEBIAN_FRONTEND: "noninteractive"
          check_mode: false
          tags:
            - "ucs_join_system_setup_domain_join_run"

      always:
        - name: "ucs_join | domain join | Make sure that the temporary admin password file is gone"
          ansible.builtin.file:
            path: "{{ ucs_join_admin_pw_file.path }}"
            state: "absent"
          changed_when: false
          check_mode: false
          tags:
            - "ucs_join_system_setup_domain_join_cleanup_admin_pw_file"
            - "cleanup"

    - name: "ucs_join | Create successful system-setup marker"
      ansible.builtin.file:
        path: "/etc/ansible/univention-system-setup_sucessful"
        state: "touch"
        mode: "644"
      check_mode: false
      tags:
        - "ucs_join_system_setup_successful"

- name: "ucs_join | Change network settings when system already initialized"
  when: "ucs_join_system_setup_status.stat.exists"
  tags:
    - "ucs_join"
    - "ucs_join_network_settings"
  block:
    - name: "ucs_join | Use DHCP network setting"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ ucs_join_network_config_interface }}/type"
            value: "dhcp"
      check_mode: false
      when: "ucs_join_network_config_type == 'dhcp'"
      tags:
        - "ucs_join_network_settings_dhcp"

    - name: "ucs_join | Use static network setting (interface)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ ucs_join_network_config_interface }}/type"
            value: "static"
          - key: "interfaces/{{ ucs_join_network_config_interface }}/address"
            value: "{{ ucs_join_network_config_static_ip_config | ansible.utils.ipaddr('address') }}"
          - key: "interfaces/{{ ucs_join_network_config_interface }}/netmask"
            value: "{{ ucs_join_network_config_static_ip_config | ansible.utils.ipaddr('netmask') }}"
          - key: "interfaces/{{ ucs_join_network_config_interface }}/network"
            value: "{{ ucs_join_network_config_static_ip_config | ansible.utils.ipaddr('network') }}"
      check_mode: false
      when: "ucs_join_network_config_type == 'static'"
      tags:
        - "ucs_join_network_settings_static_interface"

    - name: "ucs_join | Use static network setting [broadcast] (interface)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ ucs_join_network_config_interface }}/broadcast"
            value: "{{ ucs_join_network_config_static_ip_config | ansible.utils.ipaddr('broadcast') }}"
      check_mode: false
      when:
        - "ucs_join_network_config_type == 'static'"
        - "ucs_join_network_config_static_ip_config | ansible.utils.ipaddr('broadcast')"
      tags:
        - "ucs_join_network_settings_static_interface_broadcast"

    - name: "ucs_join | Use static network setting (additional interfaces)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ ucs_join_network_static_additional_interfaces_item.key }}/type"
            value: "static"
          - key: "interfaces/{{ ucs_join_network_static_additional_interfaces_item.key }}/address"
            value: "{{ ucs_join_network_static_additional_interfaces_item.value | ansible.utils.ipaddr('address') }}"
          - key: "interfaces/{{ ucs_join_network_static_additional_interfaces_item.key }}/netmask"
            value: "{{ ucs_join_network_static_additional_interfaces_item.value | ansible.utils.ipaddr('netmask') }}"
          - key: "interfaces/{{ ucs_join_network_static_additional_interfaces_item.key }}/network"
            value: "{{ ucs_join_network_static_additional_interfaces_item.value | ansible.utils.ipaddr('network') }}"
      check_mode: false
      when: "ucs_join_network_config_type == 'static'"
      loop: "{{ ucs_join_network_config_static_additional_interfaces | default({}) | dict2items }}"
      loop_control:
        loop_var: "ucs_join_network_static_additional_interfaces_item"
      tags:
        - "ucs_join_network_settings_static_additional_interfaces"

    - name: "ucs_join | Use static network setting [broadcast] (additional interfaces)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ ucs_join_network_settings_static_additional_interfaces_broadcast_item.key }}/broadcast"
            value: "{{ ucs_join_network_settings_static_additional_interfaces_broadcast_item.value
                        | ansible.utils.ipaddr('broadcast') }}"
      check_mode: false
      when:
        - "ucs_join_network_config_type == 'static'"
        - "ucs_join_network_settings_static_additional_interfaces_broadcast_item.value
              | ansible.utils.ipaddr('broadcast')"
      loop: "{{ ucs_join_network_config_static_additional_interfaces | default({}) | dict2items }}"
      loop_control:
        loop_var: "ucs_join_network_settings_static_additional_interfaces_broadcast_item"
      tags:
        - "ucs_join_network_settings_static_additional_interfaces_broadcast"

    - name: "ucs_join | Use static network setting (network routes)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ ucs_join_routes_item['interface'] }}/route/{{ ucs_join_routes_item['index'] }}"
            value: "{{ ucs_join_routes_item['route'] }}"
      check_mode: false
      loop: "{{ ucs_join_network_config_static_routes | default([]) }}"
      loop_control:
        loop_var: "ucs_join_routes_item"
      tags:
        - "ucs_join_network_settings_static_routes"

    - name: "ucs_join | Use static network setting (dns)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "dns/forwarder{{ ucs_join_network_config_static_dns_servers_index + 1 }}"
            value: "{{ ucs_join_network_config_static_dns_servers_item }}"
      check_mode: false
      loop: "{{ ucs_join_network_config_static_dns_servers | default([]) }}"
      loop_control:
        index_var: "ucs_join_network_config_static_dns_servers_index"
        loop_var: "ucs_join_network_config_static_dns_servers_item"
      when: "ucs_join_network_config_type == 'static'"
      tags:
        - "ucs_join_network_settings_static_dns"

- name: "ucs_join | Check if previous setup vars are set"
  ansible.builtin.stat:
    path: "/etc/ansible/facts.d/system-setup-vars.yml"
  register: "ucs_join_system_setup_vars_file"
  tags:
    - "always"
    - "ucs_join"
    - "ucs_join_system_setup_vars"

- name: "ucs_join | Check if user wants to change unsupported vars"
  when: "ucs_join_system_setup_vars_file.stat.exists"
  tags:
    - "ucs_join_system_setup_facts"
    - "ucs_join"
  block:
    - name: "ucs_join | Create temporary file"
      ansible.builtin.tempfile:
        state: "file"
        suffix: ".yml"
      changed_when: false
      check_mode: false
      register: "ucs_join_asystem_setup_tempfile"
      tags:
        - "ucs_join_system_setup_facts_temp"

    - name: "ucs_join | Get previous system configuration"
      ansible.builtin.fetch:
        src: "/etc/ansible/facts.d/system-setup-vars.yml"
        dest: "{{ ucs_join_asystem_setup_tempfile.path }}"
        flat: true
      changed_when: false
      check_mode: false
      tags:
        - "ucs_join_system_setup_facts_fetch"

    - name: "ucs_join | Include vars of previous join"
      ansible.builtin.include_vars:
        file: "{{ ucs_join_asystem_setup_tempfile.path }}"
        name: "ucs_join_system_setup_vars"
      changed_when: false
      check_mode: false
      tags:
        - "ucs_join_system_setup_facts_include_vars"

    - name: "ucs_join | Assert that unchangeable vars are the same"
      ansible.builtin.assert:
        that:
          - "'{{ ucs_join_system_setup_vars.ucs_join_hostname }}' == '{{ ucs_join_hostname }}'"
          - "'{{ ucs_join_system_setup_vars.ucs_join_domain_name }}' == '{{ ucs_join_domain_name }}'"
          - "'{{ ucs_join_system_setup_vars.ucs_join_basedn }}' == '{{ ucs_join_basedn }}'"
          - "'{{ ucs_join_system_setup_vars.ucs_join_server_type }}' == '{{ ucs_join_server_type }}'"
        fail_msg: "You've tried to change variables which will afterwards damage your exising installation."
      changed_when: false
      check_mode: false
      tags:
        - "ucs_join_system_setup_facts_assert"

  always:
    - name: "ucs_join | Make sure that the system setup vars are gone"
      ansible.builtin.file:
        path: "{{ ucs_join_asystem_setup_tempfile.path }}"
        state: "absent"
      changed_when: false
      tags:
        - "ucs_join_system_setup_facts_temp_removal"
        - "cleanup"

- name: "ucs_join | configure nameserver"
  univention.ucs_modules.univention_config_registry:
    state: "{{ ucs_join_nameservers_item.value.state | default('present') }}"
    kvlist:
      - key: "{{ ucs_join_nameservers_item.key }}"
        value: "{{ ucs_join_nameservers_item.value.server | default('8.8.8.8') }}"
  loop: "{{ ucs_join_nameservers | dict2items }}"
  loop_control:
    loop_var: "ucs_join_nameservers_item"
  when:
    - "ucs_join_nameservers_item.key | regex_search('^nameserver[1-3]$')"
  tags:
    - "always"
    - "ucs_join"
    - "ucs_join_configure_namserver"

- name: "ucs_join | Run Univention Join Scripts"
  tags:
    - "ucs_join"
    - "ucs_join_run_join_script"
  block:
    - name: "ucs_join | Create temporary admin password file"
      ansible.builtin.tempfile:
        state: "file"
      changed_when: false
      no_log: "{{ ucs_join_hide_logging }}"
      register: "ucs_join_admin_pw_file"
      tags:
        - "ucs_join_run_join_script_admin_pw_file_temp"

    - name: "ucs_join | Write admin password into temporary file"
      ansible.builtin.copy:
        dest: "{{ ucs_join_admin_pw_file.path }}"
        content: "{{ ucs_join_root_password }}"
        mode: "0600"
      changed_when: false
      no_log: "{{ ucs_join_hide_logging }}"
      when: "ucs_join_admin_pw_file is not skipped"
      tags:
        - "ucs_join_run_join_script_admin_pw_file"

    - name: "ucs_join | Run univention join scripts"
      ansible.builtin.command: >
        univention-run-join-scripts
        -dcaccount "{{ ucs_join_admin_user_name }}"
        -dcpwd "{{ ucs_join_admin_pw_file.path }}"
      changed_when: false
      when: "ucs_join_admin_pw_file is not skipped"
      tags:
        - "ucs_join_run_join_script_run"

  always:
    - name: "ucs_join | Make sure that the temporary admin password file is gone"
      ansible.builtin.file:
        path: "{{ ucs_join_admin_pw_file.path }}"
        state: "absent"
      changed_when: false
      when: "ucs_join_admin_pw_file is not skipped"
      tags:
        - "ucs_join_run_join_script_cleanup_admin_pw_file"
        - "cleanup"

...
